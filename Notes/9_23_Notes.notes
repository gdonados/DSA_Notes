[2022-09-23]
==> !Notes! <==
- List reference based (SLS)
    - Link structure implementation
    - Linear
    - Structured as follows:
        HEAD -> [Object][Reference] -> [Object][Reference] -> ...
    - Each element has Object data, and a *reference* to the next element in memory
    - Head contains the reference to the first element
    - Pros:
        - Still simple
        - On demand allocation
        - No shifting/copying needed for add/remove
    - Cons:
        - Lose direct index accessing
        - Using more memory
            - An additional reference per element (2X memory)
        - Link traversal
    - Supporting class *Node*
        - Contains the [Object][Reference] structure used in this implementation
            [java]
            public class Node
            {
                private Object item;
                private Node next;

                public Node(Object item)
                {
                    this.item = item;
                    next = null;
                }

                public Node(Object item, Node next)
                {
                    this.item = item;
                    this.next = next
                }
            }
            [end]

    - !Do not create a new Node in one line unless used!
        - Node tmp = new Node(); !no!
        - tmp = ~~~;
    
    - Implementing the interface:
        - get method
            - Traverse the linked strucutre starting with HEAD data field an "index" number of times, return the "Item" datafield
            - Need index validation
            - Don't immediately return, save in result variable first
        - add method
            - Need index validation
            - Paramters: int index, Object item
            - Need to create new Node
            - Traverse to and update "index-1" to reference the new Node
            - New Node "next" needs to reference "index+1"
            - Use find on "index-1": find(index-1)
            - newNode = new Node(item, "index-1".getNext())
            - "index-1".setNext(newNode)
                - Do above 2 all in one line
            - Update numItems
            - If adding to index 0, use if check to do different fucntionality
                - Update HEAD as well
                - if(index == 0) { HEAD = new Node(item, HEAD)}
                - Should also take care of first add to the list
            - numItems++
                [java]
                public void add(int index, Object item)
                {
                    //NEED INDEX VALIDATION
                    if(index == 0)
                    {
                        head = new Node(item, head);
                    }
                    else
                    {
                        Node prev = find(index-1);
                        prev.setNext(new Node(item, prev.getNext()));
                    }

                    numItems++;
                }
                [end]
        - !Do not call find() more than once! 
        - remove method
            - Need index validation
            - Traverse until "index", copy "next" of "index+1" into "index-1", remove "index"
                [java]
                public void remove(int index)
                {
                    //NEED INDEX VALIDATION
                    if(index == 0)
                    {
                        head = head.getNext();
                    }
                    else
                    {
                        Node prev = find(index-1);
                        prev.setNext(prev.getNext().getNext());
                    }
                    numItems--;
                }
                [end]
        - private Node find(int index)
            - Traversal method
            - Returns a reference to a Node
            - Used by get, add, and remove
            - NO NEED FOR INDEX VALIDATION IN find(), should be done prior
            - Use a local "result" variable to return
            - Reference to Node at "index" should be the "next" value of the Node at "index-1"
            - HEAD is going to be the first value of "result"
            - Node result = head;
            - Advance the result if not correct index using result = result.getNext();
            - For loop for incrementing
            - !For loop ending is "index" times!, don't go to numItems
            - This will have the ultimate "result" value being the desired index
            - 
        - We will be using numItems?
        - 

==> !TODO! <==
[âˆš] Lab 2 Redo
[ ] Lab 3 due 9/27