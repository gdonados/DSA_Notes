[2022-11-14]
==> Notes <==
- Elementary sorting methods all have a worst case of n(n-1)/2
    - Linear amount of work to reduce the size by only 1
- How can we increase the speed?
    - "Divide and conquer"
- Typically recursive
- Divide the large problem into sub problems
    - Combine the solution of the sub problems to solve the large problem
- Goals for this new sorting method
    - Want O(nlog(n))
    - Constant amount of additional storage (work in place)
- Split the problem down the middle
- Process:
    - Pick a pivot (median)
    - Hard divide + easy combine = a series of division steps
    - easy divide + hard combine = a series of combination steps
- Example
    - [3 7 0 6 5 1 4 2]
    - Divide
    - [3 7 0 6 | 5 1 4 2]
    - [3 7 0 6] [5 1 4 2]
    - Recursively sort
    - [0 3 6 7] [1 2 4 5]
    - Combine
        - Smallest item has to be the first index of either array
        - 0 or 1, determine and add to new array
        - Next, compare index 1 of the first array to first index of second array
        - 3 and 1, determine and add to new array
        - Continue order, next is index 1 of both, 3 and 2 and so on
    - [0 1 2 3 4 5 6 7]
    - Combination step is the "merge" step
    - Known as "Merge Sort"
    - Can do without recursion
    - If one array runs out of indices to check, then the other array contains the rest of the elements, already sorted
    - Time analysis
        - T(n) = step 1 + step 2 + step 3
            - Step 1 is divide step, no critical work
            - Step 2 is sorting halves, T(n/2) twice
            - Step 3 is merging, worst case is n-1 comparisons
            - 
        - T(n) = 0 + (T(n/2) + T(n/2)) + (n-1)
        - 0 work for base case T(1)
        - Back-sub
            - Over estimate a bit on the upper bound, can remove -1
            - T(n) = n + 2(T/2)
            - T(n) = n = 2(n/2 + 2T(n/2)) -> n + n + 4T(n/4)
            - Continue
            - General case: n + n + ... + n + 2^k*T(n/2^k)
                - k number of n's
            - k*n + 2^k*T(n/2^k)
            - Adding Base case: n * log(n) + nT(1) = nlog(n)
            - Result: n*log(n)
                - Best time for Sorting

    - Unfortunately, does not work in place
    - Can we do it not recursively?
        - Start with an array the same size as the array you are sorting
            Dest.: [               ]
            OG:    [3 7 0 6 5 1 4 2]
        - Compare index 0 and 1 and sort into new array
            Dest.: [[3 7]          ]
            OG:    [3 7 0 6 5 1 4 2]
        - Move up to index 2 and 3, sort and add into new array
            Dest.: [[3 7][0 6]     ]
            OG:    [3 7 0 6 5 1 4 2]
        - Continue for all pairs of indices
            Dest.: [[3 7][0 6][1 5][2 4]]
            OG:    [3 7 0 6 5 1 4 2]
        - After sorted into pairs of 2, swap the roles of the 2 arrays
            OG:       [[3 7][0 6][1 5][2 4]]
            Dest.:    [3 7 0 6 5 1 4 2] <- Override
        - Merge/compare [3 7] and [0 6]
            - Compare  3 and 0
            - Compare 3 and 6
            - Compare 7 and 6
            - Add 7
            OG:       [[3 7][0 6][1 5][2 4]]
            Dest.:    [[0 3 6 7][1 2 4 5]]
        - Now swap array roles again, merge/compare
            Final: [[0 1 2 3 4 5 6 7]]
        - Only need a single extra array
- Different approach:
    - Step 1: Pick a pivot and divide based on it
    - Step 2: Recursviely sort
    - Step 3:

    - Step 1:
        - Choose pivot
        - If not already in place, swap pivot with item in first index in sub array
        - [3 7 0 6 5 1 4 2]
        - Let's choose a pivot at value 4
        - [3 7 0 6 5 1 (4) 2]
        - Swap into first index
        - [(4) 7 0 6 5 1 3 2]
        - For each candidate, place in < pivot partition or > p partition
        - [p <p >p [c       ]]
        - Compare c to p, if < put it in <p, >p if greater
        - i index starts at <p, j index starts at >p
        - if (c > p), j++
        - [[p] [<p] [>p c][       ]]
        - if (c < p), swap >p and c, i++
        - [[p][c <p][>p][         ]]
        - Back to numbers
        - [(4) 7 0 6 5 1 3 2]
            - i and j are index 0, first candidate is 7
            - 7 > 4, goes into the >p partition
            - Increment j
        - [(4) (7) 0 6 5 1 3 2]
          [ i   j unpartitioned]
        - Next candidate is 0
            - 0 < 4
            - goes into the <p partition
            - Swap first item in the >p partion(7) and 0, increment i
        - [(4) (0) (7) 6 5 1 3 2]
                i   j
               <p   >p
        - Next candidate, 6
            - 6 > 4
            - 6 goes into >p partition
            - increment j
         - [(4) (0) (7 6) 5 1 3 2]
                i      j
               <p     >p

        - Next, 5
            - 5 > 4
            - 5 goes into >p partition
            - increment j
        - [(4) (0) (7 6 5) 1 3 2]
                i       j
               <p     >p

        - Next, 1
            - 1 < 4
            - 1 goes into <p partition
            - swap with first item in >p(7), increment i
        - [(4) (0 1) (6 5 7) 3 2]
                  i       j
                <p      >p
        - Next, 3
            - 3 < 4
            - 3 goes into <p partition
            - swap with first item in >p(6), increment i
        - [(4) (0 1 3) (5 7 6) 2]
                    i       j
                 <p        >p

        - Finally, 2
            - 2 < 4
            - 2 goes into <p partition
            - swap with first item in >p(5), increment i
        - [(4) (0 1 3 2) (7 6 5)]
                      i       j
                  <p        >p
        - Items are now partitioned, but not yet sorted
        - !Next step, swap pivot with LAST item in <p partition!
        - [(2 0 1 3) (4) (7 6 5)]
                  i           j
               <p     p     >p

    - Step 2:
        - Sort the <p and >p partition choosing a new pivot and redoing process
        - [(0 1 2 3) (4) (5 6 7)]
        - Array is sorted
        - All the work is in step 1

    - "Quick Sort" 0_0
    - Quick sort analysis
        - T(n)
            - n-1 comparions to pivot to partition
        - T(n) = n-1
            - Add quicksorting the <p and >p partitions
        - T(n) = n-1 + T(|<p|) + T(|>p|)
        - If the pivot happens to be the median:
            - T(n) = n-1 + T(n/2) + T(n/2)
            - n*log(n)
        - Quick sort is also "in place"

        - If partitioning is bad:
            - T(n) = n-1 + T(0) + T(n-1)
            - T(n) = n + T(n-1)
            - Brings us back to an exponential increase
            
==> TODO <==

